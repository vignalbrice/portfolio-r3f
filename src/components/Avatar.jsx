/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/model/avatar.glb --output src/components/Avatar.jsx -r public
*/

import React, { useRef, useEffect } from "react";
import { useAnimations, useFBX, useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useControls } from "leva";
import * as THREE from "three";
import { getFirstAnimation, renameActionName } from "../helpers/helpers";
import { useCharacterAnimations } from "../hooks/useCharacterAnimations";

export function Avatar({ animation, ...props }) {
  const group = useRef();
  const { nodes, materials } = useGLTF("/models/avatar.glb");
  const { headFollow, cursorFollow } = useControls({
    headFollow: false,
    cursorFollow: false,
  });
  const { animations: typingAnimation } = useFBX("/animations/Typing.fbx");
  const { animations: standingAnimation } = useFBX("/animations/Standing.fbx");
  const { animations: fallingAnimation } = useFBX("/animations/Falling.fbx");
  const { animations: wavingAnimation } = useFBX("/animations/Waving.fbx");
  const { animations: pointingAnimation } = useFBX("/animations/Pointing.fbx");
  const { animations: walkingAnimation } = useFBX("/animations/Walking.fbx");

  const typing = getFirstAnimation(typingAnimation);
  const standing = getFirstAnimation(standingAnimation);
  const falling = getFirstAnimation(fallingAnimation);
  const waving = getFirstAnimation(wavingAnimation);
  const pointing = getFirstAnimation(pointingAnimation);
  const walking = getFirstAnimation(walkingAnimation);
  renameActionName(typing, "Typing");
  renameActionName(standing, "Standing");
  renameActionName(falling, "Falling");
  renameActionName(waving, "Waving");
  renameActionName(pointing, "Pointing");
  renameActionName(walking, "Walking");

  const animations = [typing, standing, falling, waving, pointing, walking];
  const { animationIndex } = useCharacterAnimations();
  const { actions, names } = useAnimations(animations, group);

  useFrame((state) => {
    // headFollow will make the head look at the camera position
    if (headFollow)
      group.current
        .getObjectByName("Head")
        .lookAt(state.mouse.x, state.mouse.y, 20);

    // cursorFollow will make the head look at the cursor position
    if (cursorFollow) {
      const target = new THREE.Vector3(state.mouse.x, state.mouse.y, 1);
      group.current.getObjectByName("Spine2").lookAt(target);
    }
  });
  useEffect(() => {
    actions[names[animationIndex]]?.reset().fadeIn(0.5).play();
    return () => {
      actions[names[animationIndex]]?.fadeOut(0.5);
    };
  }, [actions, animationIndex, names]);

  // useEffect(() => {
  //   Object.values(materials).forEach((material) => {
  //     material.wireframe = wireframe;
  //   });
  // }, [wireframe]);

  return (
    <group {...props} ref={group} dispose={null}>
      <group name="Armature" rotation-x={-Math.PI / 2}>
        <primitive object={nodes.Hips} />
        <skinnedMesh
          frustumCulled={false}
          name="Wolf3D_Body"
          geometry={nodes.Wolf3D_Body.geometry}
          material={materials.Wolf3D_Body}
          skeleton={nodes.Wolf3D_Body.skeleton}
        />
        <skinnedMesh
          frustumCulled={false}
          name="Wolf3D_Outfit_Bottom"
          geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
          material={materials.Wolf3D_Outfit_Bottom}
          skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
        />
        <skinnedMesh
          frustumCulled={false}
          name="Wolf3D_Outfit_Footwear"
          geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
          material={materials.Wolf3D_Outfit_Footwear}
          skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
        />
        <skinnedMesh
          frustumCulled={false}
          name="Wolf3D_Outfit_Top"
          geometry={nodes.Wolf3D_Outfit_Top.geometry}
          material={materials.Wolf3D_Outfit_Top}
          skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
        />
        <skinnedMesh
          frustumCulled={false}
          name="Wolf3D_Hair"
          geometry={nodes.Wolf3D_Hair.geometry}
          material={materials.Wolf3D_Hair}
          skeleton={nodes.Wolf3D_Hair.skeleton}
        />
        <skinnedMesh
          frustumCulled={false}
          name="EyeLeft"
          geometry={nodes.EyeLeft.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeLeft.skeleton}
          morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
        />
        <skinnedMesh
          frustumCulled={false}
          name="EyeRight"
          geometry={nodes.EyeRight.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeRight.skeleton}
          morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
        />
        <skinnedMesh
          frustumCulled={false}
          name="Wolf3D_Head"
          geometry={nodes.Wolf3D_Head.geometry}
          material={materials.Wolf3D_Skin}
          skeleton={nodes.Wolf3D_Head.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
        />
        <skinnedMesh
          frustumCulled={false}
          name="Wolf3D_Teeth"
          geometry={nodes.Wolf3D_Teeth.geometry}
          material={materials.Wolf3D_Teeth}
          skeleton={nodes.Wolf3D_Teeth.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/models/avatar.glb");
